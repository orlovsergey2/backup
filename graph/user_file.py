import tkinter as tk
from tkinter import ttk, messagebox

from .logger import get_logger
from .styles import set_styles
class UserStorage:
    def __init__(self, root, username, show_back_button=False, back_callback=None):
        self.root = root
        self.username = username
        self.root.title(f"–•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {username}")
        self.root.geometry("700x500")
        self.root.configure(bg="#f5f5f5")
        self.show_back_button = show_back_button
        self.back_callback = back_callback

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
        self.logger = get_logger()
        set_styles(self.root)
        self.create_widgets()

    def create_widgets(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = tk.Frame(self.root, bg="#f5f5f5", padx=30, pady=30)
        main_container.pack(fill=tk.BOTH, expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = tk.Label(main_container,
                         text=f"–ú–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ - {self.username}",
                         font=("Arial", 18, "bold"),
                         bg="#f5f5f5",
                         fg="#2c3e50")
        title.pack(pady=(0, 20))

        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = tk.Label(main_container,
                               text="–ó–¥–µ—Å—å –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏.\n"
                                    "–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∏–≤–∞—Ç—å, –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å\n"
                                    "—Å–≤–æ–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏.",
                               font=("Arial", 12),
                               bg="#f5f5f5",
                               fg="#34495e",
                               justify=tk.LEFT)
        description.pack(pady=(0, 20))

        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        list_frame = tk.Frame(main_container, bg="white", relief=tk.SUNKEN, bd=2)
        list_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 20))

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫
        self.file_listbox = tk.Listbox(list_frame,
                                       font=("Arial", 11),
                                       selectmode=tk.SINGLE,
                                       relief=tk.FLAT)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.load_file_info()

        # Scrollbar –¥–ª—è —Å–ø–∏—Å–∫–∞
        scrollbar = tk.Scrollbar(list_frame, orient=tk.VERTICAL)
        self.file_listbox.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.file_listbox.yview)

        self.file_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        button_frame = tk.Frame(main_container, bg="#f5f5f5")
        button_frame.pack(pady=10)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–±–µ—Ä–∞–µ–º "–°–¥–µ–ª–∞—Ç—å –æ–±—â–∏–º–∏")
        buttons = [
            ("–°–∫–∞—á–∞—Ç—å", self.download),
            ("–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", self.open_file),
            ("–ó–∞–≥—Ä—É–∑–∏—Ç—å", self.upload),
            ("–£–¥–∞–ª–∏—Ç—å", self.delete),
            ("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", self.rename),
        ]

        for text, command in buttons:
            btn = tk.Button(button_frame,
                            text=text,
                            command=command,
                            bg="#3498db",
                            fg="white",
                            font=("Arial", 10),
                            padx=12,
                            pady=6,
                            relief=tk.RAISED,
                            bd=2)
            btn.pack(side=tk.LEFT, padx=5)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.show_back_button and self.back_callback:
            back_btn = tk.Button(button_frame,
                                 text="–ù–∞–∑–∞–¥",
                                 command=self.back_callback,
                                 bg="#e74c3c",
                                 fg="white",
                                 font=("Arial", 10, "bold"),
                                 padx=12,
                                 pady=6,
                                 relief=tk.RAISED,
                                 bd=2)
            back_btn.pack(side=tk.RIGHT, padx=5)

    def download(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°–∫–∞—á–∞—Ç—å"""
        selection = self.file_listbox.curselection()
        if not selection:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return

        file_info = self.file_listbox.get(selection[0])

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        if " -> " in file_info:
            file_path = file_info.split(" -> ")[1]
            filename = file_info.split(" -> ")[0].split(" ", 1)[1]  # –£–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É
        else:
            file_path = file_info
            filename = file_info

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        import os
        if os.path.exists(file_path):
            self.logger.log_file_operation(self.username, "DOWNLOAD", filename, True)
            messagebox.showinfo("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ", f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {file_path}")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

    def open_file(self):
        """–û—Ç–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        selection = self.file_listbox.curselection()
        if not selection:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è")
            return

        file_info = self.file_listbox.get(selection[0])

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        if " -> " in file_info:
            file_path = file_info.split(" -> ")[1]
            filename = file_info.split(" -> ")[0].split(" ", 1)[1]  # –£–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É
        else:
            file_path = file_info
            filename = file_info

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
        import os
        import subprocess
        import platform

        if os.path.exists(file_path):
            try:
                if platform.system() == 'Windows':
                    os.startfile(file_path)
                elif platform.system() == 'Darwin':  # macOS
                    subprocess.call(['open', file_path])
                else:  # Linux
                    subprocess.call(['xdg-open', file_path])
                self.logger.log_file_operation(self.username, "OPEN_FILE", filename, True)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç: {filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {str(e)}")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

    def upload(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å"""
        from tkinter import filedialog, simpledialog

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫
        file_paths = filedialog.askopenfilenames(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
            filetypes=[
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*"),
                ("–î–æ–∫—É–º–µ–Ω—Ç—ã", "*.pdf;*.doc;*.docx;*.txt"),
                ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.jpg;*.jpeg;*.png;*.gif"),
                ("–ê—Ä—Ö–∏–≤—ã", "*.zip;*.rar;*.7z"),
                ("–í–∏–¥–µ–æ", "*.mp4;*.avi;*.mkv"),
                ("–ê—É–¥–∏–æ", "*.mp3;*.wav;*.flac")
            ]
        )

        if file_paths:
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            save_path = simpledialog.askstring(
                "–ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏):",
                initialvalue=""
            )

            if save_path is None:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
                return

            if not save_path:
                save_path = "."  # –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞

            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            import os
            try:
                os.makedirs(save_path, exist_ok=True)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {str(e)}")
                return

            added_files = []
            for file_path in file_paths:
                filename = os.path.basename(file_path)
                destination = os.path.join(save_path, filename)

                try:
                    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                    import shutil
                    shutil.copy2(file_path, destination)

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                    ext = os.path.splitext(filename)[1].lower()
                    if ext in ['.pdf']:
                        icon = "üìÑ"
                    elif ext in ['.jpg', '.jpeg', '.png', '.gif']:
                        icon = "üñºÔ∏è"
                    elif ext in ['.mp4', '.avi', '.mkv']:
                        icon = "üé•"
                    elif ext in ['.mp3', '.wav', '.flac']:
                        icon = "üéµ"
                    elif ext in ['.zip', '.rar', '.7z']:
                        icon = "üì¶"
                    elif ext in ['.doc', '.docx']:
                        icon = "üìù"
                    elif ext in ['.xls', '.xlsx']:
                        icon = "üìä"
                    else:
                        icon = "üìÑ"

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫ —Å –ø—É—Ç–µ–º
                    file_info = f"{icon} {filename} -> {destination}"
                    self.file_listbox.insert(tk.END, file_info)
                    added_files.append(file_info)
                    self.logger.log_file_operation(self.username, "UPLOAD", filename, True)

                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å {filename}: {str(e)}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ —Ñ–∞–π–ª
            self.save_file_info(added_files)

            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(added_files)}")
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")

    def save_file_info(self, files):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª"""
        try:
            filename = f"{self.username}_files.txt"
            with open(filename, "a", encoding="utf-8") as f:
                for file in files:
                    f.write(f"{file}\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö: {e}")

    def load_file_info(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª"""
        try:
            filename = f"{self.username}_files.txt"
            with open(filename, "r", encoding="utf-8") as f:
                files = f.readlines()
                for file in files:
                    if file.strip():
                        self.file_listbox.insert(tk.END, file.strip())
        except FileNotFoundError:
            pass  # –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö: {e}")

    def delete(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –£–¥–∞–ª–∏—Ç—å"""
        selection = self.file_listbox.curselection()
        if not selection:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        file = self.file_listbox.get(selection[0])
        if messagebox.askyesno("–£–¥–∞–ª–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª '{file}'?"):
            self.file_listbox.delete(selection[0])
            self.logger.log_file_operation(self.username, "DELETE", file, True)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª '{file}' —É–¥–∞–ª–µ–Ω")

    def rename(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"""
        selection = self.file_listbox.curselection()
        if not selection:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
            return

        file = self.file_listbox.get(selection[0])
        new_name = tk.simpledialog.askstring("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è '{file}':")
        if new_name:
            self.file_listbox.delete(selection[0])
            self.file_listbox.insert(selection[0], new_name)
            self.logger.log_file_operation(self.username, "RENAME", f"{file} -> {new_name}", True)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_name}'")
def main():
    root = tk.Tk()
    app = UserStorage(root)
    root.mainloop()


if __name__ == "__main__":
    main()
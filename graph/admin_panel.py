import tkinter as tk
from tkinter import ttk
from .styles import set_styles
from .file_admin import SimpleAdminStorage
from .logger import get_logger

class AdminPanel:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        self.root.geometry("550x550")
        self.root.configure(bg="#1e1e1e")
        self.root.resizable(False, False)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
        self.logger = get_logger()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª–∏
        set_styles(self.root)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
        self.create_widgets()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.logger.log_admin_action("admin", "ADMIN_PANEL_OPENED")

    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')

    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = tk.Label(self.root,
                         text="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                         font=("Arial", 18, "bold"),
                         bg="#1e1e1e",
                         fg="white")
        title.pack(pady=30)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = tk.Label(self.root,
                            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                            font=("Arial", 12),
                            bg="#1e1e1e",
                            fg="#3498db")
        user_info.pack(pady=10)

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = tk.Frame(self.root, bg="#1e1e1e")
        btn_frame.pack(pady=40)

        # –ö–Ω–æ–ø–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_btn = ttk.Button(btn_frame, 
                              text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
                              command=self.show_users)
        users_btn.pack(pady=10, ipadx=20, ipady=10)

        # –ö–Ω–æ–ø–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        storage_btn = ttk.Button(btn_frame, 
                                text="–•—Ä–∞–Ω–∏–ª–∏—â–µ", 
                                command=self.open_storage)
        storage_btn.pack(pady=10, ipadx=20, ipady=10)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
        logs_btn = ttk.Button(btn_frame, 
                             text="–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤", 
                             command=self.view_logs)
        logs_btn.pack(pady=10, ipadx=20, ipady=10)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        logout_btn = ttk.Button(btn_frame, 
                               text="–í—ã–π—Ç–∏", 
                               command=self.logout)
        logout_btn.pack(pady=20, ipadx=20, ipady=10)

    def show_users(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        self.logger.log_admin_action("admin", "VIEW_USERS_LIST")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.root.destroy()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_window = tk.Tk()
        users_window.title("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        users_window.geometry("450x400")
        users_window.configure(bg="#1e1e1e")
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        users_window.update_idletasks()
        width = users_window.winfo_width()
        height = users_window.winfo_height()
        x = (users_window.winfo_screenwidth() // 2) - (width // 2)
        y = (users_window.winfo_screenheight() // 2) - (height // 2)
        users_window.geometry(f'{width}x{height}+{x}+{y}')
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        def on_closing():
            users_window.destroy()
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            from .admin_panel import open_admin_panel
            open_admin_panel()
        
        users_window.protocol("WM_DELETE_WINDOW", on_closing)
        
        title = tk.Label(users_window,
                         text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                         font=("Arial", 16, "bold"),
                         bg="#1e1e1e",
                         fg="white")
        title.pack(pady=20)
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_list = tk.Listbox(users_window,
                               font=("Arial", 11),
                               bg="#2d2d2d",
                               fg="white",
                               selectbackground="#3498db")
        users_list.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
        def load_users():
            users_list.delete(0, tk.END)
            try:
                import sys
                import os
                sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'autorization'))
                from autorization.registration import Database
                
                db = Database()
                with db.get_cursor() as cursor:
                    cursor.execute("SELECT username, is_admin FROM users")
                    users = cursor.fetchall()
                    
                    for user in users:
                        user_type = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user['is_admin'] else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                        users_list.insert(tk.END, f"{user_type}: {user['username']}")
                        
            except Exception as e:
                # Fallback - —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                users_list.insert(tk.END, "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: admin")
                users_list.insert(tk.END, "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user")
                users_list.insert(tk.END, "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user1")
                users_list.insert(tk.END, "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user2")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        load_users()
        
        # –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        def delete_user(messagebox=None):
            selection = users_list.curselection()
            if not selection:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return
            
            user_text = users_list.get(selection[0])
            username = user_text.split(": ")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            if username == "admin":
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
                return
            
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}'?"):
                try:
                    import sys
                    import os
                    sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'autorization'))
                    from autorization.registration import Database
                    
                    db = Database()
                    with db.get_cursor() as cursor:
                        cursor.execute("DELETE FROM users WHERE username = %s", (username,))
                    
                    self.logger.log_admin_action("admin", "DELETE_USER", f"Deleted user: {username}")
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —É–¥–∞–ª–µ–Ω")
                    load_users()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
                    
                except Exception as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = tk.Frame(users_window, bg="#1e1e1e")
        btn_frame.pack(pady=10)
        
        delete_btn = ttk.Button(btn_frame, 
                               text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
                               command=delete_user)
        delete_btn.pack(side=tk.LEFT, padx=5)
        
        refresh_btn = ttk.Button(btn_frame, 
                                text="–û–±–Ω–æ–≤–∏—Ç—å", 
                                command=load_users)
        refresh_btn.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_btn = ttk.Button(btn_frame, 
                             text="–ù–∞–∑–∞–¥", 
                             command=on_closing)
        back_btn.pack(side=tk.LEFT, padx=5)

    def open_storage(self):
        """–û—Ç–∫—Ä—ã—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–æ–≤"""
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        self.logger.log_admin_action("admin", "OPEN_ADMIN_STORAGE")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.root.destroy()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        storage_window = tk.Tk()
        storage_window.title("–•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        storage_window.geometry("700x500")
        storage_window.configure(bg="#f5f5f5")
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        storage_window.update_idletasks()
        width = storage_window.winfo_width()
        height = storage_window.winfo_height()
        x = (storage_window.winfo_screenwidth() // 2) - (width // 2)
        y = (storage_window.winfo_screenheight() // 2) - (height // 2)
        storage_window.geometry(f'{width}x{height}+{x}+{y}')
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        def on_closing():
            storage_window.destroy()
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            from .admin_panel import open_admin_panel
            open_admin_panel()
        
        storage_window.protocol("WM_DELETE_WINDOW", on_closing)
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
        storage_app = SimpleAdminStorage(storage_window, show_back_button=True, back_callback=on_closing)

    def view_logs(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        self.logger.log_admin_action("admin", "VIEW_LOGS")
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
        logs_window = tk.Toplevel(self.root)
        logs_window.title("–ñ—É—Ä–Ω–∞–ª —Å–∏—Å—Ç–µ–º—ã")
        logs_window.geometry("800x600")
        logs_window.configure(bg="#1e1e1e")
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        logs_window.update_idletasks()
        width = logs_window.winfo_width()
        height = logs_window.winfo_height()
        x = (logs_window.winfo_screenwidth() // 2) - (width // 2)
        y = (logs_window.winfo_screenheight() // 2) - (height // 2)
        logs_window.geometry(f'{width}x{height}+{x}+{y}')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = tk.Label(logs_window,
                         text="–ñ—É—Ä–Ω–∞–ª —Å–∏—Å—Ç–µ–º—ã",
                         font=("Arial", 16, "bold"),
                         bg="#1e1e1e",
                         fg="white")
        title.pack(pady=20)
        
        # –§—Ä–µ–π–º –¥–ª—è –ª–æ–≥–æ–≤
        logs_frame = tk.Frame(logs_window, bg="#2d2d2d", relief=tk.SUNKEN, bd=2)
        logs_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        logs_text = tk.Text(logs_frame,
                           font=("Consolas", 10),
                           bg="#1e1e1e",
                           fg="#00ff00",
                           wrap=tk.WORD,
                           state=tk.DISABLED)
        
        # Scrollbar –¥–ª—è –ª–æ–≥–æ–≤
        scrollbar = tk.Scrollbar(logs_frame, orient=tk.VERTICAL)
        logs_text.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=logs_text.yview)
        
        logs_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏
        logs = self.logger.get_recent_logs(100)
        logs_text.config(state=tk.NORMAL)
        for log in logs:
            logs_text.insert(tk.END, log)
        logs_text.config(state=tk.DISABLED)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = tk.Frame(logs_window, bg="#1e1e1e")
        btn_frame.pack(pady=10)
        
        def refresh_logs():
            logs_text.config(state=tk.NORMAL)
            logs_text.delete(1.0, tk.END)
            logs = self.logger.get_recent_logs(100)
            for log in logs:
                logs_text.insert(tk.END, log)
            logs_text.config(state=tk.DISABLED)
            logs_text.see(tk.END)
        
        def clear_logs():
            if tk.messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏?"):
                self.logger.clear_logs()
                refresh_logs()
        
        refresh_btn = ttk.Button(btn_frame, text="–û–±–Ω–æ–≤–∏—Ç—å", command=refresh_logs)
        refresh_btn.pack(side=tk.LEFT, padx=5)
        
        clear_btn = ttk.Button(btn_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=clear_logs)
        clear_btn.pack(side=tk.LEFT, padx=5)
        
        close_btn = ttk.Button(btn_frame, text="–ó–∞–∫—Ä—ã—Ç—å", command=logs_window.destroy)
        close_btn.pack(side=tk.LEFT, padx=5)

    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥
        self.logger.log_user_logout("admin", "ADMIN")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
        self.root.destroy()
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        from .autorization import open_login_window
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        open_login_window()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –æ–∫–Ω–∞"""
        self.root.mainloop()

def open_admin_panel():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    app = AdminPanel()
    app.run()

if __name__ == "__main__":
    open_admin_panel()
